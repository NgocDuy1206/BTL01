// Khai báo phần header Java


import java_cup.runtime.*;
import java.util.*;
parser code {:
public java.util.List<String> errorList = new java.util.ArrayList<>();

    @Override
    public void report_error(String message, Object info) {
        Symbol s = (Symbol) info;
        errorList.add("Syntax Error: " + message + " at line " + s.left + ", column " + s.right);
        //System.err.println("Syntax Error: " + message + " at " + info);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        // Không gọi System.exit hoặc throw, cho parser tiếp tục
        // nhưng bạn có thể set một flag để dừng sau parse
    }

    @Override
        public void unrecovered_syntax_error(Symbol cur_token) {
            // Ghi lỗi và tiếp tục
            report_error("Couldn't repair and continue parse", cur_token);
            // Không throw exception nữa để parser không dừng
        }
:};

// Khai báo class parser

    terminal BEGIN, END, INT, BOOL, WHITESPACE;
    terminal IF, THEN, ELSE, DO, WHILE, FOR, PRINT;
    terminal ID, NUMBER, BOOLEAN;
    terminal ASSIGN, LPAREN, RPAREN, END_STATEMENT, LBRACE, RBRACE;
    terminal PLUS, MULTIPLY;
    terminal GT, GE, EQ;

    non terminal Program, Body, Block, BlockItem,BlockItems, Declaration, Type, InitializationOpt;
    non terminal Statement,StatementList, Assignment, IfStatement, DoWhileStatement;
    non terminal ForStatement, PrintStatement, Condition, CompareOp;
    non terminal Expr, Expr_, Term, Term_, Factor;
    non terminal ElseOpt;
    // Đặt ưu tiên cho các loại từ khóa
    precedence nonassoc ELSE;      // cho else ưu tiên giảm (resolve dangling else)

    precedence left BOOL, INT; // Tạo ưu tiên cho kiểu dữ liệu
    precedence left IF, DO, FOR, PRINT; // Tạo ưu tiên cho các câu lệnh điều kiện và vòng lặp
    precedence left ID;  // Tạo ưu tiên cho Assignment


start with Program;

// Quy tắc văn phạm

Program ::= BEGIN Body END
        {:
            Node program = new Node("Program");
            program.addNode("Body");
        :};

Body ::= LBRACE StatementList RBRACE
        {:
            Node body = new Node("Body");
            body.addNode("StatementList");
        :}
        | StatementList
        {:
            Node body = new Node("Body");
            body.addNode("StatementList");
        :};

Block ::= LBRACE StatementList RBRACE
        {:
            Node block = new Node("Block");
            block.addNode("StatementList");
        :}
        | Statement
        {:
            Node block = new Node("Block");
            block.addNode("StatementList");
        :};

StatementList ::= Statement StatementList
                | /* empty */;
Statement ::= Declaration
        | Assignment
        | IfStatement
        | DoWhileStatement
        | ForStatement
        | PrintStatement;

Declaration ::= Type ID InitializationOpt END_STATEMENT;

InitializationOpt ::= ASSIGN Expr
                    | ASSIGN Condition
                    | /* empty */ ;
Type ::= INT | BOOL;

Assignment ::= ID ASSIGN Expr END_STATEMENT;

IfStatement ::= IF LPAREN Condition RPAREN THEN Block ElseOpt;

ElseOpt ::= /* empty */ | ELSE Block;


DoWhileStatement ::= DO LBRACE StatementList RBRACE WHILE LPAREN Condition RPAREN END_STATEMENT;

ForStatement ::= FOR LPAREN Assignment END_STATEMENT Condition END_STATEMENT Assignment RPAREN Block;
PrintStatement ::= PRINT LPAREN Expr RPAREN END_STATEMENT;

Condition ::= Expr CompareOp Expr;

CompareOp ::= GT | GE | EQ;

Expr ::= Term Expr_ ;
Expr_ ::= PLUS Term Expr_ | /* empty */ ;

Term ::= Factor Term_ ;
Term_ ::= MULTIPLY Factor Term_ | /* empty */ ;

Factor ::= NUMBER | ID | BOOLEAN | LPAREN Expr RPAREN;

